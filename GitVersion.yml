#GitLab Flow Configuration
#https://docs.gitlab.com/ee/workflow/gitlab_flow.html
#With Gitlab Flow, all development happens in master, with feature branches created and PR'd into master
#For releases, you can either:
#- Tag releases within master
#- Create the 'production' or 'stable' branch and merge/cherrypick your releases there (in this case uncomment the commented out "mode" and "branches" sections. This is using a GitLab flow "environment" for deploying releases

#You can also create dedicated release branches for a particular stable or long-term support version (e.g. release/2.0.0) and then tag within that branch for LTS updates

# mode: Mainline
branches:
  # master:
  # regex: 'production|stable'
  develop:
    regex: 'master'
    tag: 'beta'
  release:
    tag: 'rc'

#Custom commit messages to support Convential Commits
#https://www.conventionalcommits.org/en/v1.0.0/
major-version-bump-message: (^(breaking|major)(\(.*\))?:)|(\+semver:\s?(breaking|major))|BREAKING CHANGE(:)
minor-version-bump-message: (^(feat(ure)?|minor)(\(.*\))?:)|(\+semver:\s?(feat(ure)?|minor))
patch-version-bump-message: (^((bug)?fix|patch|perf|refactor)(\(.*\))?:)|(\+semver:\s?((bug)?fix|patch))
no-bump-message: (^(none|skip|build|ci|docs|style|test)(\(.*\))?:)|(\+semver:\s?(none|skip))

#Set the build numbers to be xxx, example 0.1.0-myfeature001 or 0.2.1-beta001. This allows for longer feature branch names, and can be increased for more active projects
#You should set this to the number of commits you expect to have for a given branch before merging.
#For instance, if vNext is never going to contain more than 99 commits before you push it to master as a new version, you can set this to 2. 3 is good for all but the largest projects.
legacy-semver-padding: 3
build-metadata-padding: 3
commits-since-version-source-padding: 3