# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
      - production
      - ci

stages:
- stage: build
  displayName: Build Powershell Module
  jobs:
  - template: .ci/PowerCD.yml
    parameters:
      vmImage:
        - 'ubuntu-latest'
        - 'windows-latest'
        - 'macOS-latest'
      psVersion:
        - pwsh
        - powershell
      script: './build.ps1'
      linuxContainer: 'skip'
      windowsContainer: 'skip'
- stage: deploy
  condition: |
    and(
      succeeded(),
      and(
        in(
          variables['Build.SourceBranch'],
          'refs/heads/ci'
          'refs/heads/master'
          'refs/heads/production'
        ),
        ne(
          '$(PSGALLERYAPIKEY)',
          ''
        )
      )
    )
  displayName: Deploy Powershell Module
  jobs:
  - deployment: psgallery
    environment: 'psgallery-prerelease'
    displayName: "[Master] Publish Prerelease to Powershell Gallery"
    strategy:
      runOnce:
        deploy:
          pool:
            vmimage: windows-latest
          steps:
          - download: current
            artifact: ubuntu-latest-pwsh
          - pwsh: |
              Publish-Module -Path PowerCD -NugetAPIKey $ENV:PSGALLERYAPIKEY -Repository PSGallery -WhatIf -Verbose
            displayName: Publish to PSGallery
            workingDirectory: $(Pipeline.Workspace)/ubuntu-latest-pwsh
            env:
              PSGALLERYAPIKEY: $(PSGALLERYAPIKEY)

# pool:
#   vmImage: windows-latest

# steps:
#   - pwsh: |
#       $verbosepreference = 'continue'
#       try {./build.ps1} catch {
#         Get-Error $PSItem
#         "##[error]This is my custom failure message"
#         exit 5
#       }

  # - stage: GitversionTest
  #   jobs:

  # - stage: Test
  #   jobs:
  #   - template: .ci/PowerCD.yml
  #     parameters:
  #       vmImage:
  #         # - 'ubuntu-latest'
  #         - 'windows-latest'
  #         # - 'macOS-latest'
  #       psVersion:
  #         - pwsh
  #         # - powershell
  #       script: |
  #         $verbosepreference = 'continue'
  #         $debugpreference = 'continue'
  #         ./build.ps1
  #       linuxContainer: 'skip'
  #       windowsContainer: 'skip'


# strategy:
#   maxParallel: 10
#   matrix:
#     windows-latest-powershell:
#       os: windows-latest
#       psversion: powershell
#     windows-latest-pwsh:
#       os: windows-latest
#       psversion: pwsh
#     ubuntu-latest-pwsh:
#       os: ubuntu-latest
#       psversion: pwsh
#     macOS-latest-pwsh:
#       os: macOS-latest
#       psversion: pwsh
#     vs2017-win2016-powershell:
#       os: vs2017-win2016
#       psversion: powershell
#     vs2017-win2016-pwsh:
#       os: vs2017-win2016
#       psversion: pwsh
# pool:
#   vmImage: $(os)
# steps:
# - script: "$(psversion) -noninteractive -noprofile -f build.ps1"
#   displayName: 'Build and Test Powershell Module'




# - task: CopyFiles@2
#   displayName: 'Copy Completed Powershell Module Zip to Artifact Staging Area'
#   inputs:
#     sourceFolder: '$(Build.SourcesDirectory)/BuildOutput'
#     contents: '*.zip'
#     targetfolder: '$(Build.StagingDirectory)'

# - task: CopyFiles@2
#   displayName: 'Copy Completed Powershell Nuget Package to Artifact Staging Area'
#   inputs:
#     sourceFolder: '$(Build.SourcesDirectory)/BuildOutput'
#     contents: '*.nupkg'
#     targetfolder: '$(Build.StagingDirectory)'

# - task: PublishPipelineArtifact@1
#   displayName: 'Capture Powershell Module as Artifact'
#   inputs:
#     artifactName: '$(os)-$(psversion)'
#     targetPath: '$(Build.StagingDirectory)'