# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
      - production
      - ci
      - AzurePipelines

# pr:
#   branches:
#     include:
#       - master
#       - production

steps:
  - pwsh: |
      $ENV:DOTNET_NOLOGO=1
      dotnet tool restore
      dotnet tool run dotnet-gitversion
  # - stage: Build
  #   jobs:
  #   - template: .ci/PowerCD.yml
  #     parameters:
  #       vmImage:
  #         - 'ubuntu-latest'
  #         - 'windows-latest'
  #         - 'macOS-latest'
  #       psVersion:
  #         - pwsh
  #         - powershell
  #       script: './build.ps1 Build'
  #       linuxContainer: 'skip'
  #       windowsContainer: 'skip'
  # - stage: GitversionTest
  #   jobs:

  # - stage: Test
  #   jobs:
  #   - template: .ci/PowerCD.yml
  #     parameters:
  #       vmImage:
  #         # - 'ubuntu-latest'
  #         - 'windows-latest'
  #         # - 'macOS-latest'
  #       psVersion:
  #         - pwsh
  #         # - powershell
  #       script: |
  #         $verbosepreference = 'continue'
  #         $debugpreference = 'continue'
  #         ./build.ps1
  #       linuxContainer: 'skip'
  #       windowsContainer: 'skip'


# strategy:
#   maxParallel: 10
#   matrix:
#     windows-latest-powershell:
#       os: windows-latest
#       psversion: powershell
#     windows-latest-pwsh:
#       os: windows-latest
#       psversion: pwsh
#     ubuntu-latest-pwsh:
#       os: ubuntu-latest
#       psversion: pwsh
#     macOS-latest-pwsh:
#       os: macOS-latest
#       psversion: pwsh
#     vs2017-win2016-powershell:
#       os: vs2017-win2016
#       psversion: powershell
#     vs2017-win2016-pwsh:
#       os: vs2017-win2016
#       psversion: pwsh
# pool:
#   vmImage: $(os)
# steps:
# - script: "$(psversion) -noninteractive -noprofile -f build.ps1"
#   displayName: 'Build and Test Powershell Module'

# - task: PublishTestResults@2
#   displayName: 'Capture Pester Test Result'
#   inputs:
#     testRunner: 'NUnit'
#     testResultsFiles: '**/*TestResults*.xml'
#     testRunTitle: 'Pester $(os)-$(psversion)'

# # - task: PublishCodeCoverageResults@2
# #   displayName: 'Capture Pester Code Coverage Result'
# #   inputs:
# #     summaryFileLocation: '**/*CodeCoverage*.xml'
#     #failIfCoverageEmpty: false # Optional

# - task: CopyFiles@2
#   displayName: 'Copy Completed Powershell Module Zip to Artifact Staging Area'
#   inputs:
#     sourceFolder: '$(Build.SourcesDirectory)/BuildOutput'
#     contents: '*.zip'
#     targetfolder: '$(Build.StagingDirectory)'

# - task: CopyFiles@2
#   displayName: 'Copy Completed Powershell Nuget Package to Artifact Staging Area'
#   inputs:
#     sourceFolder: '$(Build.SourcesDirectory)/BuildOutput'
#     contents: '*.nupkg'
#     targetfolder: '$(Build.StagingDirectory)'

# - task: PublishPipelineArtifact@1
#   displayName: 'Capture Powershell Module as Artifact'
#   inputs:
#     artifactName: '$(os)-$(psversion)'
#     targetPath: '$(Build.StagingDirectory)'